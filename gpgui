#!/usr/bin/python3

import libgpg

from PySide6.QtCore import Slot
from PySide6.QtGui import QAction
from PySide6.QtWidgets import QApplication, QWidget, \
QTextEdit, QLineEdit, QMenuBar, QMenu, QCheckBox, \
QFileDialog, QComboBox, QGridLayout, QHBoxLayout, \
QLabel, QPushButton, QMessageBox

app = QApplication()

class gpgui(QWidget):

    def __init__(self):
        QWidget.__init__(self)
        self.setGeometry(100, 100, 900, 600)					#modify window
        self.setWindowTitle("gpgui")

        # uid = "testgpguser@mydomain.com"
        self.passwd = 'my passphrase'						#set default password

        self.layout = QGridLayout()						#use gridlayout to cascade layouts
        self.setLayout(self.layout)

        self.menuBar = QMenuBar()						#add MenuBar
        self.layout.addWidget(self.menuBar, 0, 0)

        self.importMenu = QMenu("Import")					#Create Import Menu
        self.menuBar.addMenu(self.importMenu)					#and related Actions
        self.importPubKeyAction = QAction("Import Public Key")
        self.importPubKeyAction.triggered.connect(self.importKeyFile)
        self.importMenu.addAction(self.importPubKeyAction)
        self.importClearTextAction = QAction("Import Clear Text")
        self.importClearTextAction.triggered.connect(self.importClearText)
        self.importMenu.addAction(self.importClearTextAction)
        self.importCipherTextAction = QAction("Import Cipher Text")
        self.importCipherTextAction.triggered.connect(self.importCipherText)
        self.importMenu.addAction(self.importCipherTextAction)

        self.exportMenu = QMenu("Export")					#Create Export Menu
        self.menuBar.addMenu(self.exportMenu)
        self.exportPubKeyAction = QAction("Export Public Key")
        self.exportPubKeyAction.triggered.connect(self.exportKeyFile)
        self.exportMenu.addAction(self.exportPubKeyAction)
        self.exportClearTextAction = QAction("Export Clear Text")
        self.exportClearTextAction.triggered.connect(self.exportClearText)
        self.exportMenu.addAction(self.exportClearTextAction)
        self.exportCipherTextAction = QAction("Export Cipher Text")
        self.exportCipherTextAction.triggered.connect(self.exportCipherText)
        self.exportMenu.addAction(self.exportCipherTextAction)

        self.signMenu = QMenu("Signatures")					#Create Signatures Menu
        self.menuBar.addMenu(self.signMenu)
        self.signFileAction = QAction("Create Signature")
        self.signFileAction.triggered.connect(self.signFile)
        self.signMenu.addAction(self.signFileAction)
        self.verifySignatureAction = QAction("Verify Signature")
        self.verifySignatureAction.triggered.connect(self.verifySign)
        self.signMenu.addAction(self.verifySignatureAction)

        self.aboutMenu = QMenu("About")						#Create About Menu
        self.menuBar.addMenu(self.aboutMenu)
        self.infoAction = QAction("Info")
        self.infoAction.triggered.connect(self.displayInfo)
        self.aboutMenu.addAction(self.infoAction)
        self.licenseAction = QAction("License")
        self.licenseAction.triggered.connect(self.displayLicense)
        self.aboutMenu.addAction(self.licenseAction)

        self.textField = QTextEdit("Insert Text here")				#Create a Field for Cleartext
        self.textField.textChanged.connect(self.onTextChanged)
        self.layout.addWidget(self.textField, 1, 0)

        self.cipherTextField = QTextEdit()					#Create a Field for Ciphertext
        self.cipherTextField.textChanged.connect(self.onCipherChanged)
        self.layout.addWidget(self.cipherTextField, 2, 0)

        self.keyLayout = QHBoxLayout()						#Create a Second Layout and 
        self.layout.addLayout(self.keyLayout, 3, 0)				#add it inside the 3 line
        self.keyBox = QComboBox()						#Create a ComboBox for the imported Keys
        self.updatekeyBox()							#load the key list
        self.keyBox.currentIndexChanged.connect(self.onReceiverChanged)
        self.addKeyButton = QPushButton("ADD")					#Create a Button for Adding/Generating Keys
        self.addKeyButton.clicked.connect(self.addKeyLayout)
        self.removeKeyButton = QPushButton("REMOVE")				#and one to Remove Keys
        self.removeKeyButton.clicked.connect(self.addKeyLayout)			#(both will create more elements later)
        self.keyLayout.addWidget(self.keyBox, 8)
        self.keyLayout.addWidget(self.addKeyButton, 1)
        self.keyLayout.addWidget(self.removeKeyButton, 1)

        self.passphraseLayout = QHBoxLayout()					#Create a Layout and add it to the 4 line
        self.layout.addLayout(self.passphraseLayout, 4, 0)

        self.passphraseEdit = QLineEdit(self.passwd)				#Create a Field for Passphrases (to decrypt text)
        self.passphraseEdit.setEchoMode(QLineEdit.Password)			#hide the text (transform letters to circles)
        self.passphraseEdit.returnPressed.connect(self.onPassphraseEntered)
        self.passphraseLayout.addWidget(self.passphraseEdit, 8)

        self.hideBox = QCheckBox("Show")					#Create a Button to hide/show the passphrase
        self.hideBox.stateChanged.connect(self.onHideBoxChecked)
        self.passphraseLayout.addWidget(self.hideBox, 1)

        self.passphraseButton = QPushButton("OK")				#Create a Button to be able to confirm the the passphrase
        self.passphraseButton.clicked.connect(self.onPassphraseEntered)
        self.passphraseLayout.addWidget(self.passphraseButton, 1)

        try:									#Load the Keys and Select the first as Recipient
            keys = libgpg.list_keys(False, 0)
            self.rec = keys[0]
        except:
            print("No keys found, so no Recipient selected")

        self.show()

    def updateText(self):							#update the DEcrypted Text if eg the Passphrase has changed
        cipherText = self.cipherTextField.toPlainText()
        dec = libgpg.dec(cipherText, self.passwd)
        self.textField.setText(str(dec))

    def updateCipher(self):							#update the Encrypted Text if eg the recipient has changed
        text = self.textField.toPlainText()
        enc = libgpg.enc(str(text), self.rec)
        self.cipherTextField.setText(enc)

    def updatekeyBox(self):							#Update the ComboBox containing the Keys (add only)
        new_keys = libgpg.list_keys(False, 0)
        for k in new_keys:
            if self.keyBox.findText(k) == -1:
                self.keyBox.addItem(k)

    def display(self, text):							#Add a Label to show a Message if needed
        self.statusLayout = QHBoxLayout()					#Add a Button to remove both if acknowledged
        self.layout.addLayout(self.statusLayout, 5, 0)
        self.statusLabel = QLabel(text)
        self.statusLayout.addWidget(self.statusLabel)
        self.removeLabelButton = QPushButton("OK")
        self.removeLabelButton.clicked.connect(self.removeStatusLayout)
        self.statusLayout.addWidget(self.removeLabelButton)

    @Slot()
    def displayLicense(self):							#Create a Popup to show the License
        license = libgpg.printLicense(False)
        msgBox = QMessageBox()
        msgBox.setText(str(license))
        msgBox.exec_()

    @Slot()									#Create a Popup to show Info about the Program
    def displayInfo(self):
        info = libgpg.printInfo(False)
        msgBox = QMessageBox()
        msgBox.setText(str(info))
        msgBox.exec_()

    @Slot()									#Import Text from a File
    def importClearText(self):
        TextFile = QFileDialog.getOpenFileName()
        file = open(str(TextFile[0]), 'r')
        self.textField.setText(file.read())
        self.updateCipher()

    @Slot()
    def removeStatusLayout(self):						#Remove the Text Label if the Message was Acknowledget (Button pressed)
         if self.statusLayout is not None:
             while self.statusLayout.count():
                 item = self.statusLayout.takeAt(0)
                 widget = item.widget()
                 if widget is not None:
                     widget.deleteLater()
                 else:
                     self.layout.clearLayout(item.layout())
										#(Redundant Code -> if a "@SLot"-Function is used from a not 										
										#"connected" function the Function gets executed at the Start of the Program)
    @Slot()									
    def removeKeyLayout(self):							#Remove LineEdits and Button after a Key was Created/Deleted
        if self.keyAddLayout is not None:
           while self.keyAddLayout.count():
               item = self.keyAddLayout.takeAt(0)
               widget = item.widget()
               if widget is not None:
                   widget.deleteLater()
               else:
                   self.layout.clearLayout(item.layout())
        

    @Slot()
    def importKeyFile(self):							#Import Public Key
        fname =QFileDialog.getOpenFileName()
        self.rec = libgpg.import_key(fname[0])
        self.updatekeyBox()
        self.keyBox.setCurrentText(self.rec)


    @Slot()
    def importCipherText(self):							#Import Encrypted Text
        fname = QFileDialog.getOpenFileName()
        file = open(str(fname[0]), 'r')
        self.cipherTextField.setText(file.read())
        self.updateText()

    @Slot()
    def exportKeyFile(self):							#Export Pubic key
        uid = self.keyBox.currentText()
        libgpg.export_key(uid)
        self.display("Exported to " + uid + ".pub")


    @Slot()
    def exportCipherText(self):							#Export Encrypted Text
        cipherText = self.cipherTextField.toPlainText()
        cipherTextFile, _ =QFileDialog.getSaveFileName()
        with open(cipherTextFile, 'w') as file:
            file.write(str(cipherText))

    @Slot()
    def exportClearText(self):							#Export Text
        clearText = self.textField.toPlainText()
        clearTextFile, _ =QFileDialog.getSaveFileName()
        with open(clearTextFile, 'w') as file:
            file.write(str(clearText))

    @Slot()
    def addKeyLayout(self):							#Add Items on Request (Create/Delete Key Option)
        try:
            self.removeKeyLayout()
        except:
            pass
        buttonText = self.sender().text()
        self.uidEdit = QLineEdit("EMail")
        self.phraseEdit = QLineEdit("Passphrase")
        self.genButton = QPushButton(buttonText)
        self.remButton = QPushButton("X")
        self.keyAddLayout = QHBoxLayout()
        self.layout.addLayout(self.keyAddLayout, 6, 0)
        self.keyAddLayout.addWidget(self.uidEdit, 33)
        self.keyAddLayout.addWidget(self.phraseEdit, 33)
        self.keyAddLayout.addWidget(self.genButton, 23)
        self.keyAddLayout.addWidget(self.remButton, 10)
        self.remButton.clicked.connect(lambda: self.removeKeyLayout())

        if buttonText == "ADD":
            self.genButton.clicked.connect(self.createKey)
        elif buttonText == "REMOVE":
            self.phraseEdit.setText(self.passphraseEdit.text())
            self.uidEdit.setText(self.keyBox.currentText())
            self.genButton.clicked.connect(self.deleteKey)

    @Slot()									#Create Key
    def createKey(self):
        uid = self.uidEdit.text()
        phrase = self.phraseEdit.text()
        status = libgpg.generate_key(uid, phrase)
        if status == True:
            self.removeKeyLayout()
            self.updatekeyBox()
            self.keyBox.setCurrentText(uid)

    @Slot()									#Delete Secret and Public Key
    def deleteKey(self):
        uid = self.uidEdit.text()
        keys = libgpg.list_keys(False, 2)
        i = 0
        fingerprint = ""
        for k in keys[0]:
            if k == uid:
                fingerprint = keys[1][i]
            i = i+1
        phrase = self.phraseEdit.text()
        status = libgpg.remove_key(fingerprint, phrase)
        if status == True:
            self.removeKeyLayout()
            self.keyBox.setCurrentIndex(self.keyBox.currentIndex()-1)
            self.keyBox.removeItem(self.keyBox.findText(uid))

    @Slot()
    def signFile(self):								#Sign a File
         try:
             self.removeStatusLayout()
         except:
             pass
         sigFile = QFileDialog.getOpenFileName()
         print(sigFile)
         sigStatus = libgpg.sign_detached(sigFile[0], self.passwd)
         if sigStatus is not None:
             self.display(sigStatus)
         else:
             self.display("ERROR! Have you used the right password?")

    @Slot()									#Verify Signed FIle
    def verifySign(self):
        try:
            self.removeStatusLayout()
        except:
            pass
        sigFiles = QFileDialog.getOpenFileNames()
        if ".sig" in sigFiles[0][0]:
            sign = sigFiles[0][0]
            file = sigFiles[0][1]
            sigStatus = libgpg.verify_signature(file, sign)
        elif ".sig" in sigFiles[0][1]:
            sign = sigFiles[0][1]
            file = sigFiles[0][0]
            sigStatus = libgpg.verify_signature(bfile, sign)
        else:
            print("NO SIGNATURE FOUND")
        if sigStatus is not None:
            self.display(sigStatus)
        else:
            self.display("ERROR")

    @Slot()									#Update Encrypted Text if Text has changed
    def onTextChanged(self):
        if self.textField.hasFocus():
            text = self.textField.toPlainText()
            enc = libgpg.enc(str(text), self.rec)
            self.cipherTextField.setText(enc)

    @Slot()									#Update Text if Encrypted Text hast changed
    def onCipherChanged(self):
        if self.cipherTextField.hasFocus():
            cipherText = self.cipherTextField.toPlainText()
            dec = libgpg.dec(cipherText, self.passwd)
            self.textField.setText(str(dec))

    @Slot()									#Update the Receiver and update the Encrypted Text
    def onReceiverChanged(self):
        self.rec = self.keyBox.currentText()
        self.updateCipher()

    @Slot()									#Update the Passphrase and update the Text
    def onPassphraseEntered(self):
        self.passwd = self.passphraseEdit.text()
        self.updateText()

    @Slot()									#Un/Hide the Passphrase (of all Passphrases shown)
    def onHideBoxChecked(self):
        if self.hideBox.isChecked() == True:
            self.passphraseEdit.setEchoMode(QLineEdit.Normal)
            try:
                self.phraseEdit.setEchoMode(QLineEdit.Normal)
            except:
                pass
        else:
            self.passphraseEdit.setEchoMode(QLineEdit.Password)
            try:
                self.phraseEdit.setEchoMode(QLineEdit.Password)
            except:
                pass


gui = gpgui()
app.exec_()									#Execute the Application
